import React, { useEffect, useState, useRef } from 'react';
import { initializeApp } from 'firebase/app';
import { 
    getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged 
} from 'firebase/auth';
import { 
    getFirestore, collection, onSnapshot, query, addDoc, serverTimestamp, 
    doc, updateDoc, deleteDoc, getDocs 
} from 'firebase/firestore';
import { LayoutDashboard, BarChart, PlusSquare, ListChecks, X, Download, AlertTriangle, LogIn, Trash2, Edit } from 'lucide-react';

// --- MANDATORY FIREBASE SETUP GLOBALS ---
const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : null;
const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

// Mock data for initial chart rendering demonstration
const DUMMY_PRODUCTS = [
    { id: '1', name: 'Denim Jacket', category: 'Jacket', color: 'Blue', size: 'M', stockInQty: 50, cost: 800, price: 1500, currentStock: 45, soldQty: 5, profitMargin: 46.67, lastSold: '2025-09-15', sku: 'FTH-JAC-BLU-M', notes: 'High demand product', timestamp: { seconds: Date.now() / 1000 - 86400 * 5, nanoseconds: 0 } },
    { id: '2', name: 'Cotton T-Shirt', category: 'T-Shirt', color: 'White', size: 'L', stockInQty: 100, cost: 150, price: 300, currentStock: 10, soldQty: 90, profitMargin: 50.00, lastSold: '2025-10-18', sku: 'FTH-TEE-WHT-L', notes: 'Core product line', timestamp: { seconds: Date.now() / 1000 - 86400 * 60, nanoseconds: 0 } },
    { id: '3', name: 'Cargo Pants', category: 'Pants', color: 'Black', size: 'XL', stockInQty: 30, cost: 700, price: 1100, currentStock: 28, soldQty: 2, profitMargin: 36.36, lastSold: null, sku: 'FTH-PNT-BLK-XL', notes: 'New winter collection', timestamp: { seconds: Date.now() / 1000 - 86400 * 2, nanoseconds: 0 } },
];

const DUMMY_METRICS = {
    totalStockValue: 50 * 800 + 100 * 150 + 30 * 700, // Dummy calculation
    totalInvestment: 58000,
    totalItems: 45 + 10 + 28,
    lowStockItems: 1,
    dormantItems: 1,
};


const App = () => {
    // --- STATE MANAGEMENT ---
    const [db, setDb] = useState(null);
    const [auth, setAuth] = useState(null);
    const [userId, setUserId] = useState(null);
    
    const [isLoading, setIsLoading] = useState(true);
    const [isAuthenticated, setIsAuthenticated] = useState(false);
    const [products, setProducts] = useState([]);
    const [metrics, setMetrics] = useState(DUMMY_METRICS); // Use dummy initially
    const [currentDormantDays, setCurrentDormantDays] = useState(30);

    const [isModalOpen, setIsModalOpen] = useState(false);
    const [modalProduct, setModalProduct] = useState(null); // For editing/selling
    const [modalType, setModalType] = useState('sell'); // 'edit' or 'sell'

    const profitabilityChartRef = useRef(null);
    const investmentChartRef = useRef(null);
    
    // Form State (for adding new product)
    const [newProduct, setNewProduct] = useState({
        stockInDate: new Date().toISOString().substring(0, 10),
        category: '', name: '', color: '', season: '', size: '',
        stockInQty: 0, cost: 0, price: 0, reorderPoint: 10, imageUrl: '', notes: ''
    });

    // --- CONSTANTS ---
    const SIZE_OPTIONS = ['S', 'M', 'L', 'XL', 'XXL'];
    const SEASON_OPTIONS = [
        { value: 'Summer', label: 'Summer' }, 
        { value: 'Rainy', label: 'Rainy' },
        { value: 'Winter', label: 'Winter' },
        { value: 'All Season', label: 'All Season' },
    ];
    const DORMANT_DAYS_OPTIONS = [
        { value: 10, label: '10+ days' }, { value: 30, label: '30+ days' }, { value: 90, label: '90+ days' }
    ];
    
    // --- FIREBASE INITIALIZATION & AUTHENTICATION ---
    useEffect(() => {
        if (!firebaseConfig) {
            console.error("Firebase config is not available. Using dummy data only.");
            setIsAuthenticated(false);
            setIsLoading(false);
            setProducts(DUMMY_PRODUCTS);
            return;
        }

        try {
            const app = initializeApp(firebaseConfig);
            const firestore = getFirestore(app);
            const authInstance = getAuth(app);
            setDb(firestore);
            setAuth(authInstance);

            const unsubscribe = onAuthStateChanged(authInstance, (user) => {
                if (user) {
                    setUserId(user.uid);
                    setIsAuthenticated(true);
                    setIsLoading(false);
                } else {
                    // Sign in attempt if initial token is present
                    if (initialAuthToken) {
                        signInWithCustomToken(authInstance, initialAuthToken)
                            .then(userCredential => {
                                setUserId(userCredential.user.uid);
                                setIsAuthenticated(true);
                            })
                            .catch(error => {
                                console.error("Custom Token sign-in failed:", error);
                                signInAnonymously(authInstance);
                            });
                    } else {
                        signInAnonymously(authInstance);
                    }
                }
            });

            return () => unsubscribe();
        } catch (e) {
            console.error("Firebase initialization failed:", e);
            setIsAuthenticated(false);
            setIsLoading(false);
            setProducts(DUMMY_PRODUCTS); // Fallback to dummy
        }
    }, []);

    // --- FIREBASE DATA SUBSCRIPTION (REAL-TIME LISTENER) ---
    useEffect(() => {
        if (!db || !userId) return;

        const collectionPath = `/artifacts/${appId}/users/${userId}/products`;
        const q = query(collection(db, collectionPath));

        const unsubscribe = onSnapshot(q, (snapshot) => {
            const fetchedProducts = snapshot.docs.map(doc => ({
                id: doc.id,
                ...doc.data(),
                timestamp: doc.data().timestamp ? doc.data().timestamp.toDate().toISOString().substring(0, 10) : 'N/A'
            }));
            
            setProducts(fetchedProducts);
            
            // Recalculate metrics based on new data (simple version)
            const totalItems = fetchedProducts.reduce((sum, p) => sum + (p.currentStock || 0), 0);
            const lowStockItems = fetchedProducts.filter(p => p.currentStock <= p.reorderPoint).length;
            
            setMetrics({
                totalStockValue: fetchedProducts.reduce((sum, p) => sum + (p.currentStock * p.cost || 0), 0).toFixed(2),
                totalInvestment: fetchedProducts.reduce((sum, p) => sum + (p.stockInQty * p.cost || 0), 0).toFixed(2),
                totalItems,
                lowStockItems,
                dormantItems: fetchedProducts.filter(p => isDormant(p.lastSold, currentDormantDays)).length,
            });

            setupCharts(fetchedProducts);

        }, (error) => {
            console.error("Error fetching products: ", error);
        });

        return () => unsubscribe();
    }, [db, userId, currentDormantDays]);

    // --- CHART LOGIC (MOCKUP/DUMMY) ---
    const setupCharts = (data) => {
        // In a real application, you would initialize Chart.js here using the refs
        // and process the 'data' (products array) to generate chart data sets.
        // For this single-file JSX, we'll just log that the chart is ready.
        console.log("Charts data prepared. Ready to render Charts (using Chart.js library).");
        
        // Example logic for profitability:
        const totalProfit = data.reduce((sum, p) => sum + (p.soldQty * (p.price - p.cost) || 0), 0);
        const totalCostOfGoods = data.reduce((sum, p) => sum + (p.soldQty * p.cost || 0), 0);
        
        // This is where you would call: new Chart(profitabilityChartRef.current, {...})
    };
    
    // Trigger chart setup on data change
    useEffect(() => {
        if (products.length > 0) {
            setupCharts(products);
        }
    }, [products]);

    // --- HELPER FUNCTIONS ---
    const formatCurrency = (value) => `à§³ ${parseFloat(value).toLocaleString()}`;
    const calculateProfitMargin = (cost, price) => {
        if (price <= cost || price === 0) return 0;
        return (((price - cost) / price) * 100).toFixed(2);
    };

    const isDormant = (lastSold, days) => {
        if (!lastSold) return true; // Never sold is dormant
        const lastSoldDate = new Date(lastSold);
        const cutoffDate = new Date();
        cutoffDate.setDate(cutoffDate.getDate() - days);
        return lastSoldDate < cutoffDate;
    };
    
    const generateSKU = (product) => {
        const { name, category, color, season, size } = product;
        if (!name || !category || !color || !season || !size) return 'FTH-INCOMPLETE';
        
        const cat = category.substring(0, 3).toUpperCase();
        const col = color.substring(0, 3).toUpperCase();
        const ssn = season.substring(0, 3).toUpperCase();
        const sz = size;
        
        // Simple sequential SKU generation
        return `FTH-${cat}-${col}-${ssn}-${sz}`;
    };

    // --- HANDLERS ---
    const handleNewProductChange = (e) => {
        const { name, value, type } = e.target;
        setNewProduct(prev => ({
            ...prev,
            [name]: type === 'number' ? parseFloat(value) || 0 : value
        }));
    };

    const handleFormSubmit = async (e) => {
        e.preventDefault();
        if (!db || !userId) {
            console.error("Database or User ID not ready.");
            return;
        }

        const calculatedSku = generateSKU(newProduct);
        if (calculatedSku === 'FTH-INCOMPLETE') {
            document.getElementById('sku-incomplete-message').classList.remove('hidden');
            return;
        }

        const productData = {
            ...newProduct,
            sku: calculatedSku,
            stockInQty: newProduct.stockInQty, // Total stock originally
            currentStock: newProduct.stockInQty, // Current stock starts as stock in
            soldQty: 0,
            profitMargin: calculateProfitMargin(newProduct.cost, newProduct.price),
            timestamp: serverTimestamp(),
            lastSold: null,
            reorderPoint: newProduct.reorderPoint,
        };

        try {
            const collectionPath = `/artifacts/${appId}/users/${userId}/products`;
            await addDoc(collection(db, collectionPath), productData);
            setNewProduct(prev => ({ ...prev, name: '', category: '', color: '', season: '', size: '', stockInQty: 0, cost: 0, price: 0, notes: '', imageUrl: '' }));
            console.log('Product added successfully!');
        } catch (error) {
            console.error("Error adding product:", error);
        }
    };
    
    // Sell/Edit Modal Handlers
    const openModal = (product, type) => {
        setModalProduct(product);
        setModalType(type);
        setIsModalOpen(true);
    };

    const handleModalClose = () => { 
        setIsModalOpen(false);
        setModalProduct(null);
    };

    const handleSellUpdate = async (e) => {
        e.preventDefault();
        if (!db || !modalProduct) return;

        const qtySold = parseInt(document.getElementById('sell-quantity').value, 10);
        
        if (qtySold > modalProduct.currentStock) {
            alert("Cannot sell more than current stock!");
            return;
        }

        const newStock = modalProduct.currentStock - qtySold;
        const newSold = modalProduct.soldQty + qtySold;

        const updateData = {
            currentStock: newStock,
            soldQty: newSold,
            lastSold: new Date().toISOString().substring(0, 10)
        };

        try {
            const docRef = doc(db, `/artifacts/${appId}/users/${userId}/products`, modalProduct.id);
            await updateDoc(docRef, updateData);
            handleModalClose();
        } catch (error) {
            console.error("Error selling product:", error);
        }
    };
    
    const handleDeleteProduct = async (id) => {
        if (!db || !window.confirm("Are you sure you want to delete this product?")) return;

        try {
            const docRef = doc(db, `/artifacts/${appId}/users/${userId}/products`, id);
            await deleteDoc(docRef);
            console.log("Product deleted successfully");
        } catch (error) {
            console.error("Error deleting product:", error);
        }
    };


    const handleDormantChange = (e) => { 
        setCurrentDormantDays(parseInt(e.target.value, 10));
    };
    
    const handleExportCSV = () => { 
        // Simple CSV generation (in-browser)
        const headers = ["SKU", "Name", "Category", "Size", "Cost Price", "Sell Price", "Stock In Qty", "Current Stock", "Sold Qty", "Profit Margin (%)", "Last Sold"];
        const rows = products.map(p => [
            p.sku, p.name, p.category, p.size, p.cost, p.price, p.stockInQty, p.currentStock, p.soldQty, p.profitMargin, p.lastSold || 'N/A'
        ].join(','));
        
        const csvContent = "data:text/csv;charset=utf-8," + headers.join(',') + "\n" + rows.join('\n');
        
        const encodedUri = encodeURI(csvContent);
        const link = document.createElement("a");
        link.setAttribute("href", encodedUri);
        link.setAttribute("download", "inventory_export.csv");
        document.body.appendChild(link); // Required for Firefox
        link.click();
        document.body.removeChild(link);
    };
    
    // --- RENDER COMPONENTS ---

    const RenderModalContent = ({ product, type }) => {
        if (!product) return null;

        if (type === 'sell') {
            return (
                <form onSubmit={handleSellUpdate}>
                    <p className='mb-4 text-gray-700'>
                        Record a sale for **{product.name} ({product.size})** with SKU: <code className='font-mono text-orange-600'>{product.sku}</code>.
                    </p>
                    <p className='mb-4 font-semibold text-sm'>
                        Current Stock: <span className='text-lg text-orange-700'>{product.currentStock}</span> units.
                    </p>
                    <label htmlFor="sell-quantity" className="block text-sm font-medium text-gray-700">Quantity Sold</label>
                    <input 
                        type="number" 
                        id="sell-quantity" 
                        min="1" 
                        max={product.currentStock} 
                        defaultValue="1" 
                        required 
                        className="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2 border text-lg" 
                    />
                    <div className='p-4 border-t flex justify-end mt-6'>
                        <button type="submit" className="py-2 px-4 rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 transition duration-150">
                            Confirm Sale
                        </button>
                    </div>
                </form>
            );
        }
        
        // Edit mode (simplified for brevity - in a real app, this would be a full form)
        return (
            <div>
                <p className='text-gray-700'>
                    Editing functionality needs a dedicated state and update logic. Displaying details for:
                </p>
                <pre className='bg-gray-100 p-3 rounded-md mt-3 overflow-x-auto text-xs'>
                    {JSON.stringify(product, null, 2)}
                </pre>
            </div>
        );
    };

    if (isLoading) {
        return (
            <div id="loading-screen" className="fixed inset-0 bg-gray-50 flex flex-col justify-center items-center z-[999]">
                <div className="animate-spin rounded-full h-12 w-12 border-b-4 border-orange-600 mb-3"></div>
                <p className="text-xl font-bold text-orange-600">Loading Dashboard...</p>
            </div>
        );
    }

    if (!isAuthenticated) {
        return (
            <div id="login-required-screen" className="fixed inset-0 bg-gray-50 flex flex-col justify-center items-center p-6 text-center z-[999]">
                <LogIn className='text-orange-600 mb-4 w-16 h-16' />
                <h1 className="text-3xl font-extrabold text-gray-900 mb-3">Authentication Required</h1>
                <p className="text-gray-700 mb-4 text-lg max-w-lg">
                    This inventory management dashboard requires a valid user login to access data.
                    <br />
                    <strong>Please authenticate with a custom token</strong> to proceed.
                </p>
                <p className="text-sm text-gray-500">
                    If you see this message, it means no valid initial authentication token was provided.
                </p>
            </div>
        );
    }
    
    // Get SKU preview for the Add Product form
    const skuPreview = generateSKU(newProduct);
    const canAddProduct = skuPreview !== 'FTH-INCOMPLETE' && newProduct.stockInQty > 0 && newProduct.cost > 0 && newProduct.price > 0;
    const stockInValuePreview = formatCurrency(newProduct.stockInQty * newProduct.cost);

    const metricCards = [
        { title: "Total Items in Stock", value: metrics.totalItems, icon: <ListChecks className="w-6 h-6 text-blue-500" />, color: 'blue' },
        { title: "Total Investment Value", value: formatCurrency(metrics.totalInvestment), icon: <BarChart className="w-6 h-6 text-purple-500" />, color: 'purple' },
        { title: "Total Stock Value (Cost)", value: formatCurrency(metrics.totalStockValue), icon: <LayoutDashboard className="w-6 h-6 text-orange-500" />, color: 'orange' },
        { title: `Low Stock Items (<= ${newProduct.reorderPoint})`, value: metrics.lowStockItems, icon: <AlertTriangle className="w-6 h-6 text-red-500" />, color: 'red' },
        { title: `${currentDormantDays}+ Days Dormant`, value: metrics.dormantItems, icon: <X className="w-6 h-6 text-yellow-500" />, color: 'yellow' },
    ];

    // Main App Container
    return (
        <div id="app-container" className="flex min-h-screen bg-gray-50 font-sans">
            {/* 1. Vertical Navbar (Fixed/Sticky) */}
            <nav id="vertical-nav" className="sidebar-container bg-gray-900 fixed h-full z-20 shadow-2xl hidden lg:flex flex-col w-60">
                <div className="p-6 border-b border-gray-700 bg-orange-600">
                    <span className="text-white text-2xl font-bold font-serif">FOURTH STOCKS</span>
                </div>
                <div className="p-4 flex-1 space-y-2 overflow-y-auto">
                    {[
                        { id: 'dashboard-metrics', label: 'Overview', icon: LayoutDashboard },
                        { id: 'financial-charts', label: 'Financial Charts', icon: BarChart },
                        { id: 'add-product', label: 'Add Product', icon: PlusSquare },
                        { id: 'inventory-list', label: 'Inventory List', icon: ListChecks },
                    ].map(item => (
                        <a key={item.id} href={`#${item.id}`} className="flex items-center space-x-3 p-3 rounded-lg text-gray-200 hover:bg-orange-700 hover:text-white transition duration-150">
                            <item.icon className="w-5 h-5" />
                            <span className="font-medium">{item.label}</span>
                        </a>
                    ))}
                    <div className="mt-4 pt-4 border-t border-gray-700 text-gray-500 text-xs">
                        User ID: <code className="break-all">{userId}</code>
                    </div>
                </div>
            </nav>

            {/* 2. Main Content Area */}
            <div id="main-content" className="main-content flex-1 p-4 sm:p-8 lg:ml-60">
                <header className="mb-8 flex flex-col sm:flex-row justify-between items-start">
                    <div>
                        <h1 className="text-4xl font-extrabold text-gray-900 mb-2">Inventory Dashboard</h1>
                        <p className="text-gray-600">Real-time inventory and sales tracking for the FOURTH brand.</p>
                    </div>
                    {/* Logo */}
                    <div className="w-36 h-auto p-2 mt-4 sm:mt-0">
                        <img
                            src="https://placehold.co/150x50/F97316/ffffff?text=FOURTH+Logo"
                            alt="FOURTH Brand Logo"
                            className="w-full h-auto object-contain rounded"
                            onError={(e) => { e.target.onerror = null; e.target.src = 'https://placehold.co/150x50/F97316/ffffff?text=FOURTH+Logo'; }}
                        />
                    </div>
                </header>

                {/* --- 1. Dashboard Metrics Section --- */}
                <section id="dashboard-metrics" className="mb-10 pt-4 scroll-mt-20">
                    <h2 className="text-3xl font-bold text-gray-900 mb-6">Dashboard Overview</h2>
                    
                    {/* Dormant Stock Filter Control */}
                    <div className="flex flex-col sm:flex-row items-start sm:items-center justify-start gap-4 p-4 bg-blue-50 border border-blue-200 rounded-xl mb-6 shadow-sm">
                        <label htmlFor="dormant-select" className="font-semibold text-blue-800 whitespace-nowrap">Dormant Stock Filter (Select Days):</label>
                        <select 
                            id="dormant-select" 
                            onChange={handleDormantChange} 
                            value={currentDormantDays}
                            className="p-2 border border-blue-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 bg-white text-gray-700 w-full sm:w-auto font-medium"
                        >
                            {DORMANT_DAYS_OPTIONS.map(option => (
                                <option key={option.value} value={option.value}>
                                    {option.label}
                                </option>
                            ))}
                        </select>
                    </div>
                    
                    {/* Metric Cards Grid */}
                    <div id="metrics-container" className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-6">
                        {metricCards.map(metric => (
                            <div key={metric.title} className={`bg-white p-5 rounded-xl shadow-lg border-t-4 border-${metric.color}-500`}>
                                <div className="flex items-center justify-between mb-2">
                                    <h3 className="text-sm font-semibold text-gray-500 uppercase">{metric.title}</h3>
                                    {metric.icon}
                                </div>
                                <p className="text-2xl font-extrabold text-gray-900">{metric.value}</p>
                            </div>
                        ))}
                    </div>
                </section>

                <hr className="my-8 border-gray-200" />

                {/* --- 2. Financial Charts Section --- */}
                <section id="financial-charts" className="mb-12 pt-4 scroll-mt-20">
                    <h2 className="text-3xl font-bold text-gray-900 mb-6">Financial & Investment Overview</h2>
                    <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                        {/* Profitability Pie Chart */}
                        <div className="bg-white p-6 rounded-xl shadow-lg h-96">
                            <h3 className="text-lg font-semibold text-gray-800 mb-2">Profitability Analysis (COGS vs. Profit) - Mock</h3>
                            <div className="relative h-[85%] flex items-center justify-center">
                                {/* Chart.js Placeholder */}
                                <canvas ref={profitabilityChartRef}></canvas>
                                <div className="absolute inset-0 flex items-center justify-center text-gray-500 text-center bg-gray-50 rounded-lg p-4 border border-dashed">
                                    <p>Chart.js Data Visualization Placeholder (Requires Chart.js Library)</p>
                                </div>
                            </div>
                        </div>
                        {/* Monthly Investment Bar Chart */}
                        <div className="bg-white p-6 rounded-xl shadow-lg h-96">
                            <h3 className="text-lg font-semibold text-gray-800 mb-2">Monthly Stock Investment Trend (Cost) - Mock</h3>
                            <div className="relative h-[85%] flex items-center justify-center">
                                {/* Chart.js Placeholder */}
                                <canvas ref={investmentChartRef}></canvas>
                                <div className="absolute inset-0 flex items-center justify-center text-gray-500 text-center bg-gray-50 rounded-lg p-4 border border-dashed">
                                    <p>Chart.js Data Visualization Placeholder (Requires Chart.js Library)</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </section>

                <hr className="my-8 border-gray-200" />

                {/* --- 3. Add Product Section --- */}
                <section id="add-product" className="mb-12 pt-4 scroll-mt-20 max-w-4xl mx-auto">
                    <h2 className="text-3xl font-bold text-orange-600 mb-6 border-b pb-2">Add New Product</h2>
                    <div className="bg-white p-6 rounded-xl shadow-lg h-fit">
                        <form id="add-product-form" className="space-y-4" onSubmit={handleFormSubmit}>

                            {/* Row 1: Date and Category */}
                            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                                <div>
                                    <label htmlFor="stockInDate" className="block text-sm font-medium text-gray-700">1. Stock In Date</label>
                                    <input type="date" name="stockInDate" id="stockInDate" required className="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2 border" value={newProduct.stockInDate} onChange={handleNewProductChange} />
                                </div>
                                <div>
                                    <label htmlFor="category" className="block text-sm font-medium text-gray-700">3. Category</label>
                                    <input type="text" name="category" id="category" placeholder="e.g., T-Shirt" required className="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2 border" value={newProduct.category} onChange={handleNewProductChange} />
                                </div>
                            </div>

                            {/* Row 2: Name */}
                            <div>
                                <label htmlFor="name" className="block text-sm font-medium text-gray-700">2. Product Name</label>
                                <input type="text" name="name" id="name" placeholder="e.g., Denim Jacket" required className="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2 border" value={newProduct.name} onChange={handleNewProductChange} />
                            </div>

                            {/* Row 3: Color and Season */}
                            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                                <div>
                                    <label htmlFor="color" className="block text-sm font-medium text-gray-700">4. Color</label>
                                    <input type="text" name="color" id="color" placeholder="e.g., Black" required className="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2 border" value={newProduct.color} onChange={handleNewProductChange} />
                                </div>
                                <div>
                                    <label htmlFor="season" className="block text-sm font-medium text-gray-700">5. Season / Occasion</label>
                                    <select name="season" id="season" required className="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2 border" value={newProduct.season} onChange={handleNewProductChange}>
                                        <option value="" disabled>Select Occasion</option>
                                        {SEASON_OPTIONS.map(option => (
                                            <option key={option.value} value={option.value}>{option.label}</option>
                                        ))}
                                    </select>
                                </div>
                            </div>

                            {/* Row 4: Size and SKU Code */}
                            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                                <div>
                                    <label htmlFor="size" className="block text-sm font-medium text-gray-700">6. Size</label>
                                    <select name="size" id="size" required className="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2 border" value={newProduct.size} onChange={handleNewProductChange}>
                                        <option value="" disabled>Select Size</option>
                                        {SIZE_OPTIONS.map(size => (
                                            <option key={size} value={size}>{size}</option>
                                        ))}
                                    </select>
                                </div>
                                <div className="bg-gray-100 p-2 rounded-md border border-gray-300">
                                    <label className="block text-sm font-medium text-gray-700">7. Auto-Generated SKU</label>
                                    <p id="sku-preview" className={`text-sm font-bold font-mono mt-1 ${skuPreview === 'FTH-INCOMPLETE' ? 'text-red-500' : 'text-green-700'}`}>{skuPreview}</p>
                                </div>
                            </div>

                            {/* Row 5: Stock In Qty and Cost */}
                            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                                <div>
                                    <label htmlFor="stockInQty" className="block text-sm font-medium text-gray-700">8. Stock In Quantity</label>
                                    <input type="number" name="stockInQty" id="stockInQty" min="0" required className="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2 border" value={newProduct.stockInQty} onChange={handleNewProductChange} />
                                </div>
                                <div>
                                    <label htmlFor="cost" className="block text-sm font-medium text-gray-700">9. Cost Price (per piece) <span className="text-xs text-gray-500">(à§³)</span></label>
                                    <input type="number" name="cost" id="cost" min="0" required className="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2 border" value={newProduct.cost} onChange={handleNewProductChange} />
                                </div>
                            </div>

                            {/* Row 6: Sell Price and Reorder Point */}
                            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                                <div>
                                    <label htmlFor="price" className="block text-sm font-medium text-gray-700">11. Selling Price (per piece) <span className="text-xs text-gray-500">(à§³)</span></label>
                                    <input type="number" name="price" id="price" min="0" required className="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2 border" value={newProduct.price} onChange={handleNewProductChange} />
                                </div>
                                <div>
                                    <label htmlFor="reorderPoint" className="block text-sm font-medium text-gray-700">Reorder Point</label>
                                    <input type="number" name="reorderPoint" id="reorderPoint" min="1" required className="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2 border" value={newProduct.reorderPoint} onChange={handleNewProductChange} />
                                </div>
                            </div>

                            {/* Row 7: Notes */}
                            <div>
                                <label htmlFor="notes" className="block text-sm font-medium text-gray-700">Notes / Remarks</label>
                                <textarea name="notes" id="notes" rows="2" placeholder="Any special remarks or details..." className="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2 border" value={newProduct.notes} onChange={handleNewProductChange}></textarea>
                            </div>

                            {/* Row 8: Image URL */}
                            <div>
                                <label htmlFor="imageUrl" className="block text-sm font-medium text-gray-700">Image URL (Optional)</label>
                                <input type="url" name="imageUrl" id="imageUrl" placeholder="https://placehold.co/100x100" className="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2 border" value={newProduct.imageUrl} onChange={handleNewProductChange} />
                            </div>

                            {/* Calculated Values Display */}
                            <div className="bg-gray-100 p-3 rounded-md text-sm space-y-1 mt-4">
                                <p className="font-medium">10. Total Stock In Value: <span id="stock-in-value-preview" className="font-bold text-gray-800">{stockInValuePreview}</span></p>
                                <p className="text-xs text-gray-500">* Total current value of the stock being added.</p>
                            </div>

                            <button type="submit" id="add-product-button" disabled={!canAddProduct} className="w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-md text-base font-medium text-white bg-orange-600 hover:bg-orange-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500 transition duration-150 disabled:bg-gray-400 disabled:cursor-not-allowed">
                                <PlusSquare className="mr-2 w-5 h-5" />
                                Add Product
                            </button>
                            <p id="sku-incomplete-message" className={`text-xs text-red-500 text-center ${skuPreview === 'FTH-INCOMPLETE' ? 'block' : 'hidden'}`}>
                                Fill fields 2, 3, 4, 5, and 6 (Name, Category, Color, Season, Size) to enable SKU generation.
                            </p>
                        </form>
                    </div>
                </section>

                <hr className="my-8 border-gray-200" />

                {/* --- 4. Product List Section --- */}
                <section id="inventory-list" className="mb-12 pt-4 scroll-mt-20">
                    <div className="bg-white p-6 rounded-xl shadow-lg overflow-x-auto">
                        <div className='flex flex-col sm:flex-row justify-between items-start sm:items-center mb-4 border-b pb-2'>
                            <h2 className="text-3xl font-bold text-gray-900 mb-2 sm:mb-0">Inventory List (<span id="product-count">{products.length}</span>)</h2>
                            {/* CSV Export Button */}
                            <button 
                                id="export-csv-button" 
                                disabled={products.length === 0} 
                                className="flex items-center space-x-2 py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition duration-150 disabled:bg-gray-400 disabled:cursor-not-allowed" 
                                onClick={handleExportCSV}
                            >
                                <Download className="w-4 h-4" />
                                <span>Export CSV</span>
                            </button>
                        </div>

                        {products.length === 0 ? (
                            <p id="no-products-message" className="text-center py-8 text-gray-500">No products have been added yet.</p>
                        ) : (
                            <table className="min-w-full divide-y divide-gray-200">
                                <thead className="bg-gray-50">
                                    <tr>
                                        <th className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Product / Details</th>
                                        <th className="px-3 py-2 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Profit Margin (%)</th>
                                        <th className="px-3 py-2 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Stock Status</th>
                                        <th className="px-3 py-2 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Last Sold Date</th>
                                        <th className="px-3 py-2 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="inventory-table-body" className="bg-white divide-y divide-gray-200">
                                    {products.map(product => (
                                        <tr key={product.id} className={product.currentStock <= product.reorderPoint ? 'bg-red-50 hover:bg-red-100' : 'hover:bg-gray-50'}>
                                            <td className="px-3 py-3 whitespace-nowrap">
                                                <div className='flex items-center space-x-3'>
                                                    {product.imageUrl ? (
                                                        <img src={product.imageUrl} alt={product.name} className='w-10 h-10 object-cover rounded-md' onError={(e) => { e.target.onerror = null; e.target.src = 'https://placehold.co/40x40/cccccc/000000?text=IMG'; }}/>
                                                    ) : (
                                                        <div className='w-10 h-10 bg-gray-200 rounded-md flex items-center justify-center text-xs font-bold text-gray-600'>NO IMG</div>
                                                    )}
                                                    <div>
                                                        <p className="font-semibold text-gray-900">{product.name} ({product.size})</p>
                                                        <p className="text-xs text-gray-500 font-mono">{product.sku}</p>
                                                    </div>
                                                </div>
                                            </td>
                                            <td className="px-3 py-3 whitespace-nowrap text-center text-sm">
                                                <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${product.profitMargin > 30 ? 'bg-green-100 text-green-800' : product.profitMargin > 0 ? 'bg-yellow-100 text-yellow-800' : 'bg-red-100 text-red-800'}`}>
                                                    {product.profitMargin}%
                                                </span>
                                            </td>
                                            <td className="px-3 py-3 whitespace-nowrap text-center text-sm font-medium">
                                                <div className='font-bold text-lg text-gray-900'>{product.currentStock}</div>
                                                <div className={`text-xs ${product.currentStock <= product.reorderPoint ? 'text-red-600' : 'text-green-600'}`}>
                                                    {product.currentStock <= product.reorderPoint ? 'Low Stock!' : 'In Stock'}
                                                </div>
                                            </td>
                                            <td className="px-3 py-3 whitespace-nowrap text-center text-sm text-gray-500">
                                                {product.lastSold || 'Never Sold'}
                                            </td>
                                            <td className="px-3 py-3 whitespace-nowrap text-center text-sm font-medium space-x-2">
                                                <button 
                                                    onClick={() => openModal(product, 'sell')} 
                                                    className="text-green-600 hover:text-green-900 p-1 rounded-full hover:bg-green-50" 
                                                    title='Record Sale'
                                                >
                                                    Sell
                                                </button>
                                                <button 
                                                    onClick={() => openModal(product, 'edit')} 
                                                    className="text-blue-600 hover:text-blue-900 p-1 rounded-full hover:bg-blue-50" 
                                                    title='Edit Product'
                                                >
                                                    <Edit className='w-4 h-4 inline'/>
                                                </button>
                                                <button 
                                                    onClick={() => handleDeleteProduct(product.id)} 
                                                    className="text-red-600 hover:text-red-900 p-1 rounded-full hover:bg-red-50" 
                                                    title='Delete Product'
                                                >
                                                    <Trash2 className='w-4 h-4 inline'/>
                                                </button>
                                            </td>
                                        </tr>
                                    ))}
                                </tbody>
                            </table>
                        )}
                    </div>
                </section>
            </div>

            {/* --- Modal Structure --- */}
            {isModalOpen && modalProduct && (
                <div id="product-modal" className="fixed inset-0 bg-gray-900 bg-opacity-75 flex items-center justify-center p-4 z-50">
                    <div className="bg-white rounded-xl shadow-2xl w-full max-w-lg overflow-hidden transform transition-all duration-300 scale-100">
                        <div id="modal-header" className="p-4 flex justify-between items-center border-b border-orange-200 bg-orange-50">
                            <h2 id="modal-title" className="text-xl font-bold text-orange-700">
                                {modalType === 'sell' ? 'Record Sale' : 'Edit Product'}
                            </h2>
                            <button id="modal-close-button" className="text-gray-400 hover:text-gray-600 transition p-1 rounded-full hover:bg-orange-100" onClick={handleModalClose}>
                                <X className='w-6 h-6'/>
                            </button>
                        </div>
                        <div id="modal-body" className="p-6">
                            <RenderModalContent product={modalProduct} type={modalType} />
                        </div>
                        {/* Note: The submit button is now inside RenderModalContent for the sell form */}
                    </div>
                </div>
            )}
        </div>
    );
};

export default App;
